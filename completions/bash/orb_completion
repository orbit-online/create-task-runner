#!/bin/bash

if [ -z "$_ORB_LOCAL_INVOKE" ]; then
    _orb_bash_completion () {
        __orb_find_project_root() {
            local path
            path="$(pwd)"
            while [ "$path" != '/' ] ; do
                if [[ -d "$path/.git" || -f "$path/.env" || -f "$path/package.json" ]]; then
                    printf -- '%s' "$path"
                    return 0
                fi
                path="$(dirname "$path")"
            done
            return 1
        }

        __orb_read_dotenv_file() {
            local raw_env_line dotenv_file=$1
            while IFS= read -r raw_env_line; do
                [[ -z $raw_env_line || $raw_env_line = '#'* ]] && continue
                eval "export $raw_env_line"
            done < "$dotenv_file"
        }

        __orb_load_dotenv() {
            if [ -f "$ORB_PROJECT_PATH/.env" ]; then
                __orb_read_dotenv_file "$ORB_PROJECT_PATH/.env"
            elif [ -f "$ORB_PROJECT_PATH/config/.env" ]; then
                __orb_read_dotenv_file "$ORB_PROJECT_PATH/config/.env"
            elif [ -f "$ORB_PROJECT_PATH/config/env" ]; then
                __orb_read_dotenv_file "$ORB_PROJECT_PATH/config/env"
            elif [ -f "$ORB_PROJECT_PATH/.config/env" ]; then
                __orb_read_dotenv_file "$ORB_PROJECT_PATH/.config/env"
            elif [ -f "$ORB_PROJECT_PATH/.config/.env" ]; then
                __orb_read_dotenv_file "$ORB_PROJECT_PATH/.config/.env"
            fi
        }

        local ORB_PROJECT_PATH=$ORB_PROJECT_PATH
        if [ -z "$ORB_PROJECT_PATH" ]; then
            if [ -n "$PROJECT_PATH" ]; then
                ORB_PROJECT_PATH="$PROJECT_PATH"
            else
                ORB_PROJECT_PATH=$(__orb_find_project_root)
            fi
        fi

        if [ -z "$PROJECT_PATH" ]; then
            PROJECT_PATH="$ORB_PROJECT_PATH"
        fi

        ORB_BIN_PATHS=
        __orb_load_dotenv

        if [ -z "$ORB_BIN_PATHS" ]; then
            ORB_BIN_PATHS=()
            [ -d "$ORB_PROJECT_PATH/.bin" ] && ORB_BIN_PATHS+=( "$ORB_PROJECT_PATH/.bin" )
            [ -d "$ORB_PROJECT_PATH/bin" ] && ORB_BIN_PATHS+=( "$ORB_PROJECT_PATH/bin" )
            [ -d "$ORB_PROJECT_PATH/scripts" ] && ORB_BIN_PATHS+=( "$ORB_PROJECT_PATH/scripts" )
            [ -d "$ORB_PROJECT_PATH/tasks" ] && ORB_BIN_PATHS+=( "$ORB_PROJECT_PATH/tasks" )
            [ -d "$ORB_PROJECT_PATH/tools" ] && ORB_BIN_PATHS+=( "$ORB_PROJECT_PATH/tools" )

        fi

        if [[ $ORB_NODE_MODULES ]]; then
            [ -d "$ORB_PROJECT_PATH/node_modules/.bin" ] && ORB_BIN_PATHS+=( "$ORB_PROJECT_PATH/node_modules/.bin" )
        fi

        if [[ $ORB_HOME_BIN ]]; then
            [ -d "$HOME/.local/bin" ] && ORB_BIN_PATHS+=( "$HOME/.local/bin" )
            [ -d "$HOME/.bin" ] && ORB_BIN_PATHS+=( "$HOME/.bin" )
            [ -d "$HOME/bin" ] && ORB_BIN_PATHS+=( "$HOME/bin" )
        fi

        __orb_find_tasks() {
            local maxdepth=${ORB_BIN_PATH_RECURSE:-false} perm task_path unamestr

            unamestr=$(uname)
            if [[ $unamestr == 'Darwin' || $unamestr == 'FreeBSD' ]]; then
                perm='+ugo+x'
            else
                perm='/ugo+x'
            fi

            if $maxdepth; then
                maxdepth=''
            else
                maxdepth="-maxdepth 1"
            fi


            if [[ -z $1 ]]; then
                # shellcheck disable=2086
                find \
                    "${ORB_BIN_PATHS[@]}" \
                    $maxdepth \
                    -perm "$perm" \
                    -not -type d \
                    -print0
            else
                # shellcheck disable=2086
                find \
                    "${ORB_BIN_PATHS[@]}" \
                    $maxdepth \
                    -perm "$perm" \
                    \( -name "$task_name" -o -name "$task_name.*" \) \
                    -not -type d \
                    -print0
            fi
        }

        local tasks=()
        __orb_complete_tasks() {
            local task_path

            # shellcheck disable=2086
            while IFS= read -r -d $'\0'; do
                task_path=$(basename "$REPLY")
                tasks+=("${task_path%.*}")
            done < <(__orb_find_tasks)
        }

        __orb_complete_next_task() {
            local task_path task_name=$1 task_basename task_dir task_completion

            task_path=$(__orb_find_tasks "$task_name" | tr '\0' '\n')

            if [[ -z $task_path ]]; then
                return 0
            fi

            if (( $(wc -l <<< "$task_path") > 1 )); then
                return 0
            fi

            task_path="$(realpath "$task_path")"
            task_dir="$(dirname "$task_path")"
            task_basename="$(basename "${task_path}")"
            task_completion="${task_basename%.*}.orb_bash_completion"

            if [ -f "${task_dir}/${task_completion}" ]; then
                # shellcheck disable=2034
                _ORB_BASH_COMPLETION=1
                # shellcheck disable=SC1090
                source "${task_dir}/${task_completion}"
                _exec_orb_bash_completion
                unset _exec_orb_bash_completion
            fi

            return 0
        }

        if [ "${COMP_CWORD}" -eq "1" ]; then
            __orb_complete_tasks
            # shellcheck disable=SC2207
            COMPREPLY=($(compgen -W "$(printf -- '%q ' "${tasks[@]}")" -- "${COMP_WORDS[1]}"))
        elif [ "${COMP_CWORD}" -ge "1" ]; then
            __orb_complete_next_task "${COMP_WORDS[1]}"
        fi
    }

    complete -F _orb_bash_completion orb
fi
